/*
 * Copyright (C) 2007, The EROS Group, LLC
 *
 * This file is part of the Coyotos Operating System.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

/*
 * To create SpaceBanks and allocate storage from them, mkimage provides
 * built-in functions, (new Bank(), new Page(), etc.), along with a
 * built-in constant, PrimeBank, the root of the bank hierarchy.
 *
 * However, unless this module is imported into an image, any invocation of
 * a SpaceBank capability will hang.
 *
 * coyotos.SpaceBank has only one exported interface for public consumption:
 *
 *   Verifier:  The global SpaceBank verifier.
 * 
 * The *important* side-effect of including this module is to create
 * the SpaceBank process, which uses its Range Key to process the 
 * allocation and bank data mkimage places in the output image.  It then
 * walks through every bank endpoint created by mkimage, and places itself
 * as the reciever.  This allows invocations of bank capabilities to succeed.
 */
module coyotos.SpaceBank {
   import TargetInfo = coyotos.TargetInfo;
   import rt = coyotos.RunTime;
   import llutil = coyotos.LowLevelUtil;

   /* The Spacebank verifier is a PrimeBank endpoint with all restrictions */
   export def Verifier = enter(PrimeBankEndpoint, 0xffffffff);

   def spacebank = llutil.make_ironman_process(PrimeBank, "coyotos/SpaceBank");

   /* Register assignments for SpaceBank; only exported so that they can
    * be used by spacebank.c.
    */
   export capreg APP {
     ADDRSPACE = rt.REG.APP0,
     RANGE,	     /* Range key */
     KERNLOG,	    /* log key for debugging output */
     INITGPT,        /* initial GPT for bootstrapping */
     TMP1,
     TMP2,
     TMP3,
     TMPPAGE
   };

   /* Set up spacebank's application registers */
   spacebank.capReg[APP.RANGE] = Range();
   spacebank.capReg[APP.KERNLOG] = KernLog();
   spacebank.capReg[APP.INITGPT] = new GPT(PrimeBank);
}
