/*
 * Copyright (C) 2007, The EROS Group, LLC
 *
 * This file is part of the Coyotos Operating System.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

/*
 * coyotos.Constructor exports the following interfaces:
 *
 *
 * MetaConstructor:
 *   A Constructor that creates Builders, which are used to create new
 *   Constructors.
 *
 * Verifier:
 *   The global Constructor verifier.
 *
 * create(bank, image, tools, handler):
 *
 *   Make a constructor which creates programs obeying *image*, with
 *   process handler *handler*.  *image* should be the result of a
 *   coyotos.model.* "load_image()" call. *tools* should be a set of
 *   tools created using fresh_tools().  *handler* should be NullCap() or
 *   a constructor for the desired ProcessHandler.  *bank* should be
 *   a fresh bank.
 *
 *   The result is an Entry capability to the newly created sealed Constructor.
 *
 *   set_tool() can be used to set up the Tools node the children of this
 *   process will get.
 *
 * create_with_as(bank, as, pc, handler):
 *
 *   Like make(), only you explicitly provide an address space and PC.  
 *   *as* should either be a weak GPT or a constructor of a SpaceHandler
 *   interface.
 *
 * fresh_tools(bank):
 *   Returns a tools CapPage allocated from *bank*, with the default runtime
 *   tools set up.
 */
module coyotos.Constructor {
  import sb = coyotos.SpaceBank;

  import ps = coyotos.ProtoSpace;
  import rt = coyotos.RunTime;
  import util = coyotos.Util;

  /* Our protected payload values */
  export enum PP {
    Builder = 0,
    Constructor = 1,
    Verifier = 2,
    BRAND = 0xffff  /* used to brand processes */
  };  
  
  /* Our application registers. */
  export capreg APP {
    /* The YIELD_* registers are those used by the Constructor interfaces
     * to create new yield or verify the existing of the constructor.  For
     * pre-sealed Constructors, these are set up by setup_sealed(), below.
     *
     * The initialize() routine in Constructor.c notices that we're pre-sealed
     * by the fact that the YIELD_BRAND register is non-Null.
     */
    YIELD_BRAND = rt.REG.APP0,  /* The Brand for our yield */
    YIELD_TOOLS,		/* read-only cap to Tools CapPage */
    YIELD_PROTOSPACE,		/* weak cap to ProtoSpace page */
    YIELD_ADDRSPACE,		/* The address space (or constructor) */
    YIELD_HANDLER,		/* The Handler (or constructor thereof) */

    /* The BUILD_* registers are those used by the Builder interfaces to
     * modify the Tools and ProtoSpace the process is started with.  When
     * the Builder is seal()ed, these are overwritten with Null capabilities
     * to prevent accidental modification.
     */
    BUILD_TOOLS,	/* writable Tools capPage cap, NULL when sealed */
    BUILD_PROTOSPACE,   /* writable ProtoSpace Page cap, NULL when sealed */

    /* A copy of the Discrim cap, pulled out of our Tools at initialization */
    DISCRIM,

    /* Temporary cap registers.
     * 
     * Used during Constructor.create(), initialization, etc.
     */
    NEW_PROC,
    NEW_ENDPT,
    NEW_RENDPT,
    TMP
  };
  
  /* The Constructor program image.
   */
  def cons_image = util.load_small_image(PrimeBank, "coyotos/Constructor");
  cons_image.space = weaken(cons_image.space);

  /* There's a chicken-and-egg problem with the metaconstructor; we need
   * to know its brand before we can create any constructors, but the
   * metaconstructor is itself a constructor. 
   *
   * We solve this by allocating the process first, setting up 
   * constructor_brand, then calling setup_sealed_constructor() late.
   */
  def metacon_proc = sb.make_running_process(PrimeBank, cons_image);
 
  /* The constructor brand is a distinguished entry cap to
   * the MetaConstructor. 
   */
  def constructor_brand = enter(metacon_proc.capReg[rt.REG.INITEPT],
				PP.BRAND);
 
  /* The Verifier key is just a Verifier entry cap to the MetaConstructor. */ 
  export def Verifier = enter(metacon_proc.capReg[rt.REG.INITEPT], 
			      PP.Verifier);
 
  /* The default tools everyone starts with. */ 
  def primordial_tools = readonly(new CapPage(PrimeBank));
  primordial_tools[rt.TOOL.DISCRIM] = Discrim();
  primordial_tools[rt.TOOL.PROTOSPACE] = ps.ProtoSpace;
  primordial_tools[rt.TOOL.CONSTRUCTOR_VERIFY] = Verifier;
  primordial_tools[rt.TOOL.AUDIT_LOG] = NullCap();

  export def fresh_tools(bank) {
    return readonly(dup(bank, primordial_tools));
  }

  /*
   * Internal function which sets up *proc* (a running process with the
   * constructor image) to be a sealed constructor of image *as*, with
   * start PC *pc*, handler *handler*, all using storage from *bank*.
   * *proc* must have been allocated from *bank*.
   *
   * set_tool() can be used to set up its tool page.
   */
  def setup_sealed_constructor(bank, proc, as, pc, tools, handler) {
    def my_protospace = dup(bank, ps.ProtoSpace);
    
    def initEpt = proc.capReg[rt.REG.INITEPT];
    
    set_page_uint64(my_protospace, 0, pc);
    
    proc.brand = constructor_brand;
    
    /* Set up the base capability registers not initialized by 
     * sb.make_running_process()
     */
    proc.capReg[rt.REG.TOOLS] = primordial_tools;
    proc.capReg[rt.REG.RUNTIME] = NullCap();

    /* Set up the YIELD app registers for the Constructor so that it
     * will initialize as Sealed.
     */
    proc.capReg[APP.YIELD_TOOLS] = readonly(tools);
    proc.capReg[APP.YIELD_PROTOSPACE] = weaken(my_protospace);
    proc.capReg[APP.YIELD_ADDRSPACE] = as;
    proc.capReg[APP.YIELD_HANDLER] = handler;
    proc.capReg[APP.YIELD_BRAND] = enter(initEpt, PP.BRAND);

    /* Return the Constructor facet */
    return enter(initEpt, PP.Constructor);
  }
  
  /* Creates a constructor using *bank* (which should be a fresh bank).
   * The constructor will have an address space made from *as*, with an
   * initial PC of *pc*, and a handler of *handler*.
   *
   * Both *as* and *handler* can be constructors; in this case, when the
   * program is constructed, a new Address Space or Handler will be 
   * constructed using *as* and *handler*.
   *
   * set_tool() can be used to set up the yield's tool page.
   */
  export def make_from_as(bank, as, pc, tools, handler) {
    def proc = sb.make_running_process(bank, cons_image); 
    
    return setup_sealed_constructor(bank, proc, as, pc, tools, handler);
  }
  
  /* Creates a constructor using *bank* (which should be a fresh bank).
   * The constructor will create processes made from *image*, which should
   * be generated by a coyotos.model.* "load_image()" call.  The created
   * processes will have a handler of *handler*.
   *
   * Both *handler* can be a constructor; in this case, when the
   * program is constructed, a new Handler will be constructed using *handler*.
   *
   * set_tool() can be used to set up the yield's tool page.
   */
  export def make(bank, image, tools, handler) {
    return make_from_as(bank, image.space, image.pc, tools, handler);
  }

  /* Now we can set up the metaconstructor;  It's just a constructor whose
   * yield runs the constructor program.
   *
   * Because of the way we set up constructor_brand, it looks like a child
   * of itself.  So Verifier.verifyYield(MetaConstructor) will succeed.
   */
  export def MetaConstructor = 
    setup_sealed_constructor(PrimeBank, metacon_proc, 
			     cons_image.space, cons_image.pc, 
                             primordial_tools, NullCap());
}
