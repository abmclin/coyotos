/*
 * Copyright (C) 2007, The EROS Group, LLC
 *
 * This file is part of the Coyotos Operating System.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

module coyotos.driver.TextConsole {
  import util = coyotos.Util;
  import rt = coyotos.RunTime;
  import target = coyotos.TargetInfo;
  import small = coyotos.model.Small;

  def page_l2g = target.page_l2g;

  // Following just so that we have a space bank:
  import sb = coyotos.SpaceBank;

  /* Our protected payload values */
  export enum PP {
    Terminal = 0
  };  
  
  export capreg APP {
    MYSPACE = rt.REG.APP0,
    PHYSRANGE,
    LOG,
    TMP1,
    TMP2,
    TMP3
  };

  // For later.
  export enum TOOLS {
    PHYSRANGE = rt.TOOL.APP0
  };

  def bank = new Bank(PrimeBank);
  def image = small.load_image(bank, "coyotos/driver/TextConsole");

  // For testing, hand fabricate this as a running process:
  def tc_proc = util.make_process(PrimeBank, image, NullCap());

  /* Hand-construct an initial space for the MDA console (temporary).
   *
   * We wish to map this at 0xB0000, for which we need a containing
   * GPT.
   */
  def newSpc = util.make_gpt(PrimeBank, page_l2g+4, page_l2g+8);
  print newSpc;
  newSpc.cap[0xa] = util.make_gpt(PrimeBank, page_l2g, page_l2g+4);
  newSpc.cap[0xb] = util.make_gpt(PrimeBank, page_l2g, page_l2g+4);

  {
    def i = 0;
    while (i < 16) {
      newSpc.cap[0xa].cap[i] = nocache(PhysPageCap(0xa0 + i));
      newSpc.cap[0xb].cap[i] = nocache(PhysPageCap(0xb0 + i));
      i = i + 1;
    }
  };

  print_space(newSpc);
  print_tree(newSpc);
  print tc_proc;

  tc_proc.capReg[APP.MYSPACE] = newSpc;
  tc_proc.capReg[APP.PHYSRANGE] = Range();
  tc_proc.capReg[rt.REG.SPACEBANK] = PrimeBank;
  tc_proc.capReg[rt.REG.SELF] = tc_proc;
  tc_proc.capReg[APP.LOG] = KernLog();
  tc_proc.ioSpace = IoPerm();
}
