/*
 * Copyright (C) 2007, The EROS Group, LLC
 *
 * This file is part of the Coyotos Operating System.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

module coyotos.ProtoSpace {
  import rt = coyotos.RunTime;
  import sb = coyotos.SpaceBank;

  /* The initial app registers as seen by ProtoSpace. These overlap those
   * which may be smashed by runtime initialization.
   */
  export capreg APP {
    ADDRSPACE = rt.REG.APP_SMASHED0,
    HANDLER,
    SCHEDULE
  };

  /* Protospace is the primordial address space for a process.  It fits
   * exactly in a single page.  The target initial PC is stored as a 64-bit
   * integer at the beginning of the page, and the ProtoSpace entry point
   * is immediately afterwards, at offset 8.
   *
   * To set up a protospace for use, a new page is allocated, the
   * original protospace is copied into it, and the needed start PC
   * is written into it at offset 0.
   */
  def image = loadimage(PrimeBank, "coyotos/ProtoSpace");

  export def ProtoSpace = weaken(image.space);
}
