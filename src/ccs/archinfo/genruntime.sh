#!/bin/bash
#
# Copyright (C) 2007, The EROS Group, LLC
#
# This file is part of the Coyotos Operating System.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2,
# or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#

RUNTIME_H="$1"
INPUT="$2"

fail() {
    rm -f "$RUNTIME_H"
    echo "$0: $@" >&2
    exit 1
}

usage() {
    echo "usage: $0 output input" >&2
    exit 1
}

[ -z "$RUNTIME_H" -o -z "$INPUT" ] && usage

exec >$RUNTIME_H
cat <<\EOF
#ifndef __COYOTOS_RUNTIME_H__
#define __COYOTOS_RUNTIME_H__

/*
 * Copyright (C) 2007, The EROS Group, LLC
 *
 * This file is part of the Coyotos Operating System.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

/** @file 
 * @brief Constants for various runtime components. */

#include <coyotos/syscall.h>

/* WARNING: This file was autogenerated */

EOF
while read def name value; do
    [ "$def" == "#define" ] || fail "unexpected line \"$def $name $value\""
    case $name in
	coyotos_RunTime_REG_*)
	    reg="${name#coyotos_RunTime_REG_}"
	    if [[ $reg = *APP ]]; then
		echo "#define CAPREG_$reg $value"
	    elif [[ $reg = REPLY0 || $reg = ARG0 ]]; then
		echo "#define CAPREG_$reg $value"
		echo "#define CR_$reg 	CAP_REG($value)"
	    else
		echo "#define CR_$reg 	CAP_REG($value)"
	    fi
	;;
	coyotos_RunTime_TOOL_*)
	    tool="${name#coyotos_RunTime_TOOL_}"
	    echo "#define TOOL_$tool 	$value"
        ;;
	coyotos_RunTime_PROCESS_FC_STARTUP)
	;;
	*)
	    fail "unexpected line \"$def $name $value\""
    esac
done < "$INPUT" || fail

cat <<\EOF

/** @brief # of available application registers */
#define COYOTOS_NUM_APPREGS (CAPREG_LASTAPP - CAPREG_FIRSTAPP + 1)

/** @brief # of initial application registers used by runtime */
#define COYOTOS_APPREGS_VOLATILE 4

/* at some point, it might make sense to do bounds-checking versions */
#define CR_APP(x)	CAP_REG((x) + CAPREG_FIRSTAPP)
#define CR_REPLY(x)	CAP_REG((x) + CAPREG_REPLY0) /* 0 <= x <= 3 */
#define CR_ARG(x)	CAP_REG((x) + CAPREG_ARG0)   /* 0 <= x <= 2 */

#endif /* __COYOTOS_SYSCALL_H__ */
EOF
